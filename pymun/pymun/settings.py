"""
Django settings for pymun project.

Generated by 'django-admin startproject' using Django 3.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from . import settings_config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'l6xzqek(m6bd**n*p$ih-(*(8f-f8b7a9-f6pyf0x-yj&qo%d2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'core.apps.CoreConfig',
    'accounts.apps.AccountsConfig',
    'utils.apps.UtilsConfig',
    'search.apps.SearchConfig',
    'haystack',
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pymun.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pymun.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = settings_config.DATABASES

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

AUTH_USER_MODEL = "accounts.User"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'staticfiles'),
    os.path.join(BASE_DIR, 'staticfiles_dirs'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'static', 'media')

LANGUAGE_CODE = "en-us"

LANGUAGES = (
    ("en-us", "US English"),
    ("en-gb", "British English"),
    ("es", "Español"),
    ("fr", "Français"),
    ("zh-tw", "繁體中文"),
)

LANGUAGE_CODE = 'en'
LANGUAGES = (
    ("en", "English"),
    ("es", "Español"),
    ("fr", "Français"),
    ("zh", "繁體中文"),
)

HAYSTACK_CONNECTIONS = {
    'default_en': dict(
        ENGINE='search.multilingual_whoosh_backend.' 'MultilingualWhooshEngine',
        PATH=os.path.join(BASE_DIR, 'tmp/whoosh_index_en')
    ),
    'default_es': dict(
        ENGINE='search.multilingual_whoosh_backend.' 'MultilingualWhooshEngine',
        PATH=os.path.join(BASE_DIR, 'tmp/whoosh_index_es')
    ),
    'default_fr': dict(
        ENGINE='search.multilingual_whoosh_backend.' 'MultilingualWhooshEngine',
        PATH=os.path.join(BASE_DIR, 'tmp/whoosh_index_fr')
    ),
    'default_zh': dict(
        ENGINE='search.multilingual_whoosh_backend.' 'MultilingualWhooshEngine',
        PATH=os.path.join(BASE_DIR, 'tmp/whoosh_index_zh')
    ),
}

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(os.path.dirname(__file__), 'whoosh_index'),
    },
}

HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
